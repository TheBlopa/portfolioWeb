{"ast":null,"code":"import { select, pointer } from 'd3-selection';\nimport Kapsule from 'kapsule';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".tooltip {\\n  position: absolute;\\n  padding: 5px;\\n  border-radius: 3px;\\n  font: 12px sans-serif;\\n  color: #eee;\\n  background: rgba(0,0,0,0.65);\\n  pointer-events: none;\\n}\\n\";\nstyleInject(css_248z);\nvar index = Kapsule({\n  props: {\n    content: {\n      \"default\": false\n    }\n  },\n  init: function init(domNode, state) {\n    var isD3Selection = !!domNode && _typeof(domNode) === 'object' && !!domNode.node && typeof domNode.node === 'function';\n    var el = select(isD3Selection ? domNode.node() : domNode);\n    state.tooltipEl = el.append('div').attr('class', 'tooltip');\n    state.mouseInside = false;\n    el.on('mousemove.tooltip', function (ev) {\n      state.mouseInside = true;\n      var mousePos = pointer(ev);\n      var domNode = el.node();\n      var canvasWidth = domNode.offsetWidth;\n      var canvasHeight = domNode.offsetHeight;\n      state.tooltipEl.style('left', mousePos[0] + 'px').style('top', mousePos[1] + 'px') // adjust horizontal position to not exceed canvas boundaries\n      .style('transform', \"translate(-\".concat(mousePos[0] / canvasWidth * 100, \"%, \").concat( // flip to above if near bottom\n      canvasHeight - mousePos[1] < 100 ? 'calc(-100% - 6px)' : '21px', \")\"));\n    });\n    el.on('mouseover.tooltip', function () {\n      state.mouseInside = true;\n      state.content && state.tooltipEl.style('display', 'inline');\n    });\n    el.on('mouseout.tooltip', function () {\n      state.mouseInside = false;\n      state.tooltipEl.style('display', 'none');\n    });\n  },\n  update: function update(state) {\n    state.tooltipEl.style('display', !!state.content && state.mouseInside ? 'inline' : 'none');\n    state.tooltipEl.html(state.content || '');\n  }\n});\nexport { index as default };","map":null,"metadata":{},"sourceType":"module"}